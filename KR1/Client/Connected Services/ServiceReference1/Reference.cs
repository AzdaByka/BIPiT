//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceOnIIS")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrderData", ReplyAction="http://tempuri.org/IService1/GetOrderDataResponse")]
        System.Data.DataTable GetOrderData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetOrderData", ReplyAction="http://tempuri.org/IService1/GetOrderDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetOrderDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProviderData", ReplyAction="http://tempuri.org/IService1/GetProviderDataResponse")]
        System.Data.DataTable GetProviderData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetProviderData", ReplyAction="http://tempuri.org/IService1/GetProviderDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetProviderDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertOrder", ReplyAction="http://tempuri.org/IService1/InsertOrderResponse")]
        string InsertOrder(string date, string provider_id, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertOrder", ReplyAction="http://tempuri.org/IService1/InsertOrderResponse")]
        System.Threading.Tasks.Task<string> InsertOrderAsync(string date, string provider_id, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertProvider", ReplyAction="http://tempuri.org/IService1/InsertProviderResponse")]
        string InsertProvider(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertProvider", ReplyAction="http://tempuri.org/IService1/InsertProviderResponse")]
        System.Threading.Tasks.Task<string> InsertProviderAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecCheckOrder", ReplyAction="http://tempuri.org/IService1/RecCheckOrderResponse")]
        string RecCheckOrder(string date, string provider_id, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecCheckOrder", ReplyAction="http://tempuri.org/IService1/RecCheckOrderResponse")]
        System.Threading.Tasks.Task<string> RecCheckOrderAsync(string date, string provider_id, int cost);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecCheckProvider", ReplyAction="http://tempuri.org/IService1/RecCheckProviderResponse")]
        string RecCheckProvider(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecCheckProvider", ReplyAction="http://tempuri.org/IService1/RecCheckProviderResponse")]
        System.Threading.Tasks.Task<string> RecCheckProviderAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataTable GetOrderData() {
            return base.Channel.GetOrderData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetOrderDataAsync() {
            return base.Channel.GetOrderDataAsync();
        }
        
        public System.Data.DataTable GetProviderData() {
            return base.Channel.GetProviderData();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetProviderDataAsync() {
            return base.Channel.GetProviderDataAsync();
        }
        
        public string InsertOrder(string date, string provider_id, int cost) {
            return base.Channel.InsertOrder(date, provider_id, cost);
        }
        
        public System.Threading.Tasks.Task<string> InsertOrderAsync(string date, string provider_id, int cost) {
            return base.Channel.InsertOrderAsync(date, provider_id, cost);
        }
        
        public string InsertProvider(string name) {
            return base.Channel.InsertProvider(name);
        }
        
        public System.Threading.Tasks.Task<string> InsertProviderAsync(string name) {
            return base.Channel.InsertProviderAsync(name);
        }
        
        public string RecCheckOrder(string date, string provider_id, int cost) {
            return base.Channel.RecCheckOrder(date, provider_id, cost);
        }
        
        public System.Threading.Tasks.Task<string> RecCheckOrderAsync(string date, string provider_id, int cost) {
            return base.Channel.RecCheckOrderAsync(date, provider_id, cost);
        }
        
        public string RecCheckProvider(string name) {
            return base.Channel.RecCheckProvider(name);
        }
        
        public System.Threading.Tasks.Task<string> RecCheckProviderAsync(string name) {
            return base.Channel.RecCheckProviderAsync(name);
        }
        
        public Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
